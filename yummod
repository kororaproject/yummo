#!/usr/bin/perl
#
# Copyright (C) 2013-2014   Ian Firns <firnsy@kororaproject.org>
#                           Korora Project <admin@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

use lib './lib';

use Data::Dumper;
use File::Spec;
use FindBin;
use Mango;
use MIME::Base64 qw(decode_base64);
use Mojolicious::Lite;
use Mojo::JSON 'j';

use Yummo::Store;

my $store = Yummo::Store->new;

my $config_file = File::Spec->catfile( $FindBin::Bin, 'yummo.conf' );
my $config = plugin('JSONConfig' => { file => $config_file });
my $mango = Mango->new( $config->{db}{url} );

sub _decode_base64url($) {
  my $s = shift;
  $s =~ tr[-_][+/];
  $s .= '=' while length($s) % 4;
  return decode_base64($s);
}

helper build_filter => sub {
  my $self = shift;
  my %defaults = @_;

  return [
    repo      => $self->param('repo')       // undef,
    repos     => $self->param('repos')      // undef,

    arch      => $self->param('arch')       // undef,
    release   => $self->param('release')    // undef,
    name      => $self->param('name')       // undef,
    name_like => $self->param('name_like')  // undef,

    fields    => $self->param('fields')     // $defaults{fields} // undef,

    page      => $self->param('page')       // 0,
    page_size => $self->param('page_size')  // 256,
  ];
};

helper db_collection => sub {
  my ($self, $id) = @_;

  return $mango->db('yummo')->collection( $id // 'packages' );
};

get '/' => sub {
  shift->render('index');
};

get '/packages' => sub {
  my $self = shift;

  my $page      = $self->param('page')       // 0;
  my $page_size = $self->param('page_size')  // 256;
  my $filter    = $self->param('filter')     // "";

  $page_size = 256 if $page_size > 256;

  my $query = $filter ? j(_decode_base64url($filter)) : {};

  $self->render_later;

  my $collection = $mango->db('yummo')->collection('packages');
  my $cursor = $collection->find($query);
  my $total_count = $cursor->count;

  $cursor->skip($page * $page_size)->limit($page_size)->all(sub {
    my ($cursor, $err, $packages) = @_;

    $self->render( json => {
      meta => {
        pages => {
          current => $page,
          size    => $page_size,
        },
        count  => $total_count,
      },
      packages => $packages,
    });
  });
};

get '/package/:id' => sub {
  my $self = shift;

  my $id;
  eval { $id = Mango::BSON::ObjectID->new($self->param('id')) };

  return $self->render( json => { error => "Invalid object ID" } ) if $@;

  my $query = { _id => $id };

  $self->render_later;

  my $collection = $self->db_collection('packages');
  $collection->find_one($query => sub {
    my ($cursor, $err, $package) = @_;

    $self->render( json => $package );
  });
};

get '/repos' => sub {
  my $self = shift;

  my $page      = $self->param('page')       // 0;
  my $page_size = $self->param('page_size')  // 256;
  my $filter    = $self->param('filter')     // "";

  $page_size = 256 if $page_size > 256;

  my $query = $filter ? j(_decode_base64url($filter)) : {};

  $self->render_later;

  my $collection = $self->db_collection('repositories');
  my $cursor = $collection->find($query);
  my $total_count = $cursor->count;

  $cursor->skip($page * $page_size)->limit($page_size)->all(sub {
    my ($cursor, $err, $repositories) = @_;;

    $self->render( json => {
      meta => {
        pages => {
          current => $page,
          size    => $page_size,
        },
        count  => $total_count,
      },
      repositories => $repositories
    });
  });
};

any '*' => sub {
  shift->redirect_to('/');
};

app->config( hypnotoad => $config->{hypnotoad} );
app->secrets(['yummo']);
app->start;
