#!/usr/bin/perl
#
# Copyright (C) 2013    Ian Firns   <firnsy@kororaproject.org>
#                       Chris Smart <csmart@kororaproject.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#j

use lib './lib';

use Mojolicious::Lite;
use Data::Dumper;

use Yummo::Store;

my $store = Yummo::Store->new;

say "Loading repositories ...";
$store->load_repository_directory;

# reload repositories every hour
Mojo::IOLoop->recurring(3600 => sub {
  say "Reloading repositories ...";
  $store->load_repository_directory;
});

helper build_filter => sub {
  my $self = shift;
  my %defaults = @_;

  return [
    repo      => $self->param('repo')       // undef,
    repos     => $self->param('repos')      // undef,

    arch      => $self->param('arch')       // undef,
    release   => $self->param('release')    // undef,
    name      => $self->param('name')       // undef,
    name_like => $self->param('name_like')  // undef,

    fields    => $self->param('fields')     // $defaults{fields} // undef,

    page      => $self->param('page')       // 0,
    page_size => $self->param('page_size')  // 1000,
  ];
};

get '/' => sub {
  shift->render('index');
};

get '/packages' => sub {
  my $self = shift;
  # set default fields to summative information only
  my $filter = $self->build_filter(
    fields => "pkgKey,epoch,version,arch,release,time_build,time_file,size_installed,size_package,size_archive"
  );

  my $packages = $store->packages( @$filter );

  $self->render( json => $packages );
};

get '/packages/count' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $packages = $store->packages_count( @$filter );

  $self->render( json => $packages );
};

get '/packages/names' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $packages = $store->packages_names( @$filter );

  $self->render( json => $packages );
};

get '/repos' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $repos = $store->repositories( @$filter );

  $self->render( json => $repos );
};

get '/repo/:repo/packages/count' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $packages = $store->packages_count( @$filter );

  $self->render( json => $packages );
};

get '/repo/:repo/packages/names' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $packages = $store->packages_grouped_by_names( @$filter );

  $self->render( json => $packages );
};

get '/repo/:repo/package/:name' => sub {
  my $self = shift;
  # set default fields for verbose package details
  my $filter = $self->build_filter(
    fields => "name,pkgKey,pkgId,arch,version,epoch,release,summary,description,url,time_file,time_build,rpm_license,rpm_vendor,rpm_group,rpm_buildhost,rpm_sourcerpm,rpm_header_start,rpm_header_end,rpm_packager,size_package,size_installed,size_archive,location_href,location_base,checksum_type"
  );

  my $package = $store->packages( @$filter );

  $self->render( json => $package );
};

get '/repo/:repo/package/:name/conflicts' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $package = $store->package_conflicts( @$filter );

  $self->render( json => $package );
};

get '/repo/:repo/package/:name/provides' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $package = $store->package_provides( @$filter );

  $self->render( json => $package );
};

get '/repo/:repo/package/:name/obsoletes' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $package = $store->package_obsoletes( @$filter );

  $self->render( json => $package );
};

get '/repo/:repo/package/:name/requires' => sub {
  my $self = shift;
  my $filter = $self->build_filter;

  my $package = $store->package_requires( @$filter );

  $self->render( json => $package );
};

any '*' => sub {
  shift->redirect_to('/');
};

app->config(hypnotoad => {
  listen    => ['http://localhost:31001'],
  lock_file => '/var/lock/subsys/yummod.lock',
  pid_file  => '/var/run/yummod.pid'
});

app->secret('yummo');
app->start;
